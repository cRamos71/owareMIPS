	.data

#Table prints
LINES: .asciiz "--"
COLUMNS: .asciiz "|"
EMPTY: .asciiz "  "
EMPTY1: .asciiz " "
CONNECTOR: .asciiz "+"
N: .asciiz "\n"

#Menu
MENUSW: .asciiz "Choose one of the options: \n"
OPTION1: .asciiz "1. Play\n"
OPTION2: .asciiz "2. Turorial\n"
OPTION3: .asciiz "3. Quit\n"
INVALIDOPTION: .asciiz "\nChoose an valid option "
CHOOSEN: .asciiz "=>"

#PlayerNames
PLAYERNAME: .asciiz "Insert player names\n"
PLAYERNAME1: .asciiz "Player 1 => "
PLAYERNAME2: .asciiz "Player 2 => "


#GamePlay
CHOOSESIDE: .asciiz "\nChoose a side "
CHOOSESIDEOP: .asciiz "0.Top\n1.Bottom\n"

#PlayPrints
CHOOSEHOUSE: .asciiz "choose a house => "
GAMEEND: .asciiz "Game Finished"
EMPTYHOUSE: .asciiz "The selected house is empty!\n"
TEST: .asciiz "TEST"

#Tutorial
TUTORIAL: .asciiz "The goal of Oware is to capture more seeds (game pieces) than your opponent.\nThe game consists of two players, each controlling a row of six pits (small holes) on\ntheir side of the board, and the seeds are distributed evenly among these pits.\n\n"


#Quit
QUIT: .asciiz "Leaving game!"

player1: .space 20
player2: .space 20


	.align 2
CASASTOP: 	.word		4, 0, 4, 4, 4, 4, 0  #Careful with the first element, i need to verify if im in the first so i jump over that one
CASASBOTTOM: .word		4, 0, 4, 4, 4, 4, 0  #Careful with the last element, i need to verify if im in the last so i jump over that one

	

	.text

main:
	add $s7, $0, $0 # Manipulate when playing
	la $s0, CASASTOP # Top part of the board
	la $s1, CASASBOTTOM # Bottom part of the board

	run:
	
	jal menu
	
	jal eventHandlerMenu
	
	#jal printBoard	
	
	
	
	
	

	
	addi $v0, $0, 10
	syscall
	


eventHandlerMenu:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	readOption:
		
		addi $v0, $0, 5
		syscall
		
		j default
		
	readOptionFail:
	
		la $a0, INVALIDOPTION
		jal printf
		la $a0, CHOOSEN
		jal printf
		
		addi $v0, $0, 5
		syscall
	
	default:
	
		addi $t2, $0, 1
		slti  $t1, $v0, 0
		beq $t1, $t2, readOptionFail
		

		slti  $t1, $v0, 4
		beq $t1, $0, readOptionFail
	
	
	case1: #Play
		slti  $t1, $v0, 2
		beq $t1, $0, case2
		
		add $t1, $0, $0
		jal clear
		
		la $a0, PLAYERNAME
		jal printf
		
		jal ReadPlayerNames
		jal clear
		jal PlayGame
		
		j HandlerMenuEnd
		
	case2: #Tutorial
		slti  $t1, $v0, 3
		beq $t1, $0, case3
		
		add $t1, $0, $0
		jal clear
		
		la $a0, TUTORIAL
		jal printf
		
		jal menu
		jal eventHandlerMenu
		
		j HandlerMenuEnd
		
	case3:
		add $t1, $0, $0
		jal clear
		
		la $a0, QUIT
		jal printf
		#Quit
		#Empty, goes down.
		
		
	
	
	HandlerMenuEnd:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
	
ReadPlayerNames:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $a0, PLAYERNAME1
	jal printf
	
	addi $v0, $0, 8
	la $a0, player1
	addi $a1, $0,  19 # has to be -1 that the name according to documentation. \n
	syscall
	
	la $a0, PLAYERNAME2
	jal printf
	
	addi $v0, $0, 8
	la $a0, player2
	addi $a1, $0,  19 # has to be -1 that the name according to documentation. \n
	syscall
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra




#Game
PlayGame:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	
	jal eventHandlerSide #Chooses player one side, if 1 top/s0 else bottom/s1   S7 updated
	
	jal start
	
	
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	
	jr $ra
	
	

start: #Game loop
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	startGame:
		beq $s7, 3, gameFinished
		
		jal printBoard
		
		add $a0, $s7, $0
		jal playerMove #player move, print board after



		j startGame

	gameFinished:
		 
		la $a0, GAMEEND
		jal printf
		
		lw $ra, 0($sp)
		addi $sp, $sp, 4
	
		jr $ra
	
			
playerMove: #Player move
	addi $sp, $sp, -12
	sw $ra, 0($sp)
	sw $s3, 4($sp)
	sw $s4, 8($sp)
	
	add $s3, $a0, $0
	
	beq $s3, 0, moveTop
	
	moveBottom: # $s7 - 1
		
		la $a0, player1
		addi $v0, $0, 4
		syscall
	
		la $a0, CHOOSEHOUSE
		jal printf
		
		jumpReadMove:
		jal readMove # 1-6 checker
		add $s4, $v0, $0
		
		add $a0, $v0, $0
		add $a1, $s3, $0
		jal emptyHouse # if the choosen house is empty, $v0 is 1
		
		beq $v0, 1, jumpReadMove
		
		add $a0, $s4, $0
		addi $a1, $0, 1
		jal moveMaker
		
		
		#v0 recives
		
		#logic
		
		add $s7, $0, $0 #check if anyone wins before this
		
		
		j moveEnd
		
	moveTop: # $s7 - 0
	
		la $a0, player2
		addi $v0, $0, 4
		syscall
		
		la $a0, CHOOSEHOUSE
		jal printf
		
		jumpReadMove1:
		jal readMove
		add $s4, $v0, $0
		
		add $a0, $v0, $0
		add $a1, $s3, $0
		jal emptyHouse
		
		beq $v0, 1, jumpReadMove1
		
		add $a0, $s4, $0
		add $a1, $0, $0
		jal moveMaker
		
		#logic
		
		addi $s7, $0, 1 #check if anyone wins before this
		
	moveEnd:
	
	lw $s4, 8($sp)
	lw $s3, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 8
	jr $ra



eventHandlerSide: #Choosing Side
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	readSide:
	
		jal chooseSide
		
		addi $v0, $0, 5
		syscall
		
		j defaultSide
	
	readSideFail:
		
		la $a0, INVALIDOPTION
		jal printf
		la $a0, CHOOSEN
		jal printf
		
		addi $v0, $0, 5
		syscall
	
	defaultSide:
	
		addi $t2, $0, 1
		slti  $t1, $v0, 0
		beq $t1, $t2, readSideFail
		

		slti  $t1, $v0, 2
		beq $t1, $0, readSideFail
	
	side1: #Enters if Top, $s7 becomes 0
		slti  $t1, $v0, 1
		beq $t1, $0, side2
		
		add $s7, $0, $0
	
		j sideEnd
		
	side2: #Enters if Bottom, $s7 becomes 1
		addi $s7, $0, 1
	
	sideEnd:
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
	
#Prints
chooseSide:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	la $a0, CHOOSESIDE
	jal printf
	
	la $a0, player1
	addi $v0, $0, 4
	syscall
	
	la $a0, CHOOSESIDEOP
	jal printf
	
	la $a0, CHOOSEN
	jal printf
	
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

clear:
	#Clears table
	beq $t1, 50, clearEnd
	
	add $v0, $0, 4
	la $a0, N
	syscall
	
	addi $t1, $t1, 1
	
	j clear
	
clearEnd:
	jr $ra
	
menu: 
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	jal printMenu
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
	
printMenu:
	addi $sp, $sp, -4
	sw $ra, 0($sp)

	la $a0, MENUSW
	jal printf
	la $a0, OPTION1
	jal printf
	la $a0, OPTION2
	jal printf
	la $a0, OPTION3
	jal printf

	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
printf:
	add $v0, $0, 4
	syscall
	
	jr $ra


printBoard:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	jal boardNumbersTop
	jal boardLinesTop
	jal boardMid
	jal boardLinesBottom
	jal boardNumbersBottom
	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	


#Prints the boardBottom house numbers
boardNumbersBottom:
		addi $sp, $sp, -8
		sw $s0, 0($sp)
		sw $ra, 4($sp)

		la $a0, EMPTY
		jal printf

		addi $s0, $0, 1
		LoopPrint1:
			slti $t1, $s0, 7
			beq $t1, 0, NumbersBottomEnd
			
			add $a0, $s0, $0
			
			add $v0, $0, 1
			syscall
			
			la $a0, EMPTY
			jal printf
			
			addi $s0, $s0, 1
			
			j LoopPrint1

		NumbersBottomEnd:
			
			la $a0, N
			jal printf
			
			lw $s0, 0($sp)
			lw $ra, 4($sp)
			addi $sp, $sp, 8
			jr $ra


#Prints the boardTop house numbers
boardNumbersTop:
		addi $sp, $sp, -8
		sw $s0, 0($sp)
		sw $ra, 4($sp)
		
		la $a0, EMPTY
		jal printf
		
		addi $s0, $0, 1
		LoopPrint0:
			slti $t1, $s0, 7
			beq $t1, 0, NumbersTopEnd
			
			add $a0, $s0, $0
			
			add $v0, $0, 1
			syscall
			
			la $a0, EMPTY
			jal printf
			
			addi $s0, $s0, 1
			
			j LoopPrint0
		
		NumbersTopEnd:
		
			la $a0, N
			jal printf
			
			lw $s0, 0($sp)
			lw $ra, 4($sp)
			addi $sp, $sp, 8
			jr $ra
		
# Prints the top lines
boardLinesTop:
	add $t1, $0, $0
	addi $sp, $sp, -12
	sw $ra,  0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	
	la $a0, EMPTY
	jal printf

	addi $v0, $0, 4
	la $a0, COLUMNS
	syscall
	
	add $s1, $0, $0

	jal printLinesTop
	
	lw $ra, 0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
	addi $sp, $sp, 12
	
	jr $ra


		printLinesTop:
				slti $t0, $t1, 6 # Se o o meu contador for menor que 7, continua porque $t0 é 1 senão salta porque é 0
				beq $t0, 0, printLinesTopEnd
				
				lw $s0, 4($sp)
				
				sll $t2,  $s1, 2
				add $t2, $t2, $s0
				lw $t2, 0($t2)
				
				addi $s1, $s1, 1 
				
				slti $t0, $t2, 10
				beq $t0, 1, printOneNumberTop
				
				
				addi $v0, $0, 1
				add $a0, $0, $t2
				syscall
		
       				addi $v0, $0, 4
				la $a0, COLUMNS
				syscall
		
				addi $t1, $t1, 1
		
     				j printLinesTop
		
		
				printLinesTopEnd:
						
						addi $v0, $0, 4
        						la $a0, N
       						syscall
	   	
						jr $ra
				
				printOneNumberTop:
						
						addi $v0, $0, 1
						addi $a0, $0, 0
						syscall
						
						addi $v0, $0, 1
						add $a0, $0, $t2
						syscall
						
						addi $v0, $0, 4
						la $a0, COLUMNS
						syscall
						
						addi $t1, $t1, 1
						
						j printLinesTop
						
						



# Prints the midlines
boardMid:
		add $t1, $0, $0
		addi $sp, $sp, -4
		sw $ra,  0($sp)


		lw $t2,  24($s1)
						
		addi $v0, $0, 1
        		add $a0, $t2, $0
       		syscall

		la $a0, EMPTY1
		jal printf

		addi $v0, $0,4
      		la $a0, CONNECTOR
     		syscall
     		
     		jal printLinesMid
     	
     		
     		lw $ra, 0($sp)
		addi $sp, $sp, 4
	
		jr $ra

		printLinesMid:
				slti $t0, $t1, 6 # Se o o meu contador for menor que 7, continua porque $t0 é 1 senão salta porque é 0
				beq $t0, 0, printLinesMidEnd
		
				addi $v0, $0,4
				la $a0, LINES
     				syscall
     		
     				addi $v0, $0,4
      				la $a0, CONNECTOR
     				syscall
     		
     				addi $t1, $t1, 1
     		
     				j printLinesMid
		
				
				printLinesMidEnd:
						
						addi $v0, $0, 4
						la $a0, EMPTY1
						syscall
				
       						lw $t2,  24($s1)
						
						addi $v0, $0, 1
        						add $a0, $t2, $0
       						syscall
       						
						addi $v0, $0, 4
        						la $a0, N
       						syscall
	   	
						jr $ra

# Prints the bottom lines
boardLinesBottom:
	add $t1, $0, $0
	addi $sp, $sp, -12
	sw $ra,  0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	
	la $a0, EMPTY
	jal printf
	
	addi $v0, $0, 4
	la $a0, COLUMNS
	syscall
	
	add $s0, $0, $0
	jal printLinesBottom
	
	lw $ra,  0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
	addi $sp, $sp, 12
	
	jr $ra
	
		printLinesBottom:
				slti $t0, $t1, 6 # Se o o meu contador for menor que 7, continua porque $t0 é 1 senão salta porque é 0
				beq $t0, 0, printLinesBottomEnd
				
				lw $s1, 8($sp)
				
				sll $t2,  $s0, 2
				add $t2, $t2, $s1
				lw $t2, 0($t2)
				
				addi $s0, $s0, 1 
				
				slti $t0, $t2, 10
				beq $t0, 1, printOneNumberBottom
				
				
				addi $v0, $0, 1
				add $a0, $0, $t2
				syscall
		
       				addi $v0, $0, 4
				la $a0, COLUMNS
				syscall
		
				addi $t1, $t1, 1
		
     				j printLinesBottom
     				
     				printLinesBottomEnd:
     						
						addi $v0, $0, 4
        						la $a0, N
       						syscall
	   	
						jr $ra
				
				printOneNumberBottom:
				
						addi $v0, $0, 1
						addi $a0, $0, 0
						syscall
						
						addi $v0, $0, 1
						add $a0, $0, $t2
						syscall
						
						addi $v0, $0, 4
						la $a0, COLUMNS
						syscall
						
						addi $t1, $t1, 1
						
						j printLinesBottom
						
#Game logic, from this line on

readMove: # Called in 248
	addi $sp, $sp, -8
	sw $ra, 0($sp)
	sw $s3, 4($sp)
	
	readHouse:

		addi $v0, $0, 5
		syscall
		
		add $s3, $v0, $0
		
		j defaultHouse
	
	readHouseFail:
		
		la $a0, INVALIDOPTION
		jal printf
		la $a0, CHOOSEN
		jal printf
		
		addi $v0, $0, 5
		syscall
	
		add $s3, $v0, $0
	
	defaultHouse:
	
		addi $t2, $0, 1
		slti  $t1, $v0, 1
		beq $t1, $t2, readHouseFail
		

		slti  $t1, $v0, 7
		beq $t1, $0, readHouseFail
		
	#If it gets here, we are sucessfuly filtered between 1-6
	
	
	la $a0, N
	jal printf
	
	add $v0, $s3, $0
	
	lw $s3, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 8
	jr $ra
		
	
emptyHouse: #verify if the selected house is empty
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	addi $a0, $a0, -1
	sll $t0, $a0, 2
	 # $t0, offset of the chosen house
		
		
	beq $a1, 1, bottomEmptyHouse
	
	# $s7 - 0 top
	
	la $t1, 0($s0) #top array
	add $t1, $t1, $t0 # moving the offset
	
	lw $t0, 0($t1)
	
	beq $t0, 0, emptyHouseFound
	
	
	add $v0, $0, $0 # return 0 if it has something
	
	j emptyHouseEnd
	
	
	bottomEmptyHouse:  # $s7 - 1 bottom
	
		la $t1, 0($s1)
		add $t1, $t1, $t0 # moving the offset
		
		lw $t0, 0($t1)
		
		beq $t0, 0, emptyHouseFound
	
		add $v0, $0, $0 # return 0 if it has something
	
		j emptyHouseEnd
	
	emptyHouseFound:
	
		la $a0, EMPTYHOUSE
		jal printf
		la $a0, INVALIDOPTION
		jal printf
		la $a0, CHOOSEN
		jal printf
		addi $v0, $0, 1 # return 1 if it is empty
	
	emptyHouseEnd:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
	
moveMaker:
	addi $sp, $sp, -16
	sw $ra, 0($sp)
	sw $s3, 4($sp)
	sw $s4, 8($sp)
	sw $s5, 12($sp)
	
	beq $a1, 0, topArray
	
	la $t0, 0($s1)
	j initSeeding
	
	topArray:
		la $t0, 0($s0)

	initSeeding:
	addi $a0, $a0, -1
	sll $t1, $a0, 2
	add $t0, $t0, $t1
	lw $s3, 0($t0) # $s3 has the ammount of seeds in that house
	
	add $s4, $0, $0
	sw $s4, 0($t0) # reset chosen house
	
	sll $s4,  $a0, 2
	
	beq $a1, 0, switchPlantSide

	plantSeeds:
		beq $s3, $0, endPlant
		beq $s4, 20, switchPlantSideFilter
		
		la $s5, 0($s1)
		
		addi $s4,  $s4, 4
		add $t2, $s4, $s5 #Now im in the current pos
		lw $t1, 0($t2)
		
		addi $t1, $t1, 1
		sw $t1, 0($t2) #Updated
		
		addi $s3, $s3, -1
		
		j plantSeeds
	
	switchPlantSideFilter:
		addi $s4, $0, 24
		
	switchPlantSide:	
		beq $s3, $0, endPlant
		beq $s4, 0 , reswitchPlantSide
		
		la $s5, 0($s0)
		
		addi $s4, $s4, -4
		add $t2, $s4, $s5
		lw $t1, 0($t2)
		
		addi $t1, $t1, 1 #Updated
		sw $t1, 0($t2)
		
		addi $s3, $s3, -1
		
		j switchPlantSide
	
	reswitchPlantSide:
		addi $s4, $0, -4
		j plantSeeds
	
	endPlant:
	
	lw $s5, 12($sp)
	lw $s4, 8($sp)
	lw $s3, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 16
	jr $ra	
	
	
	
	
	
	
	
	
	
	
	
	
